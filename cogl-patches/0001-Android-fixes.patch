From 430466f96ab066a975f3ad01ac284385f69ab021 Mon Sep 17 00:00:00 2001
From: Robert Bragg <robert@linux.intel.com>
Date: Thu, 1 Mar 2012 00:28:32 +0000
Subject: [PATCH] Android fixes

---
 cogl/winsys/cogl-winsys-egl-android.c      |   15 ++++++
 cogl/winsys/cogl-winsys-egl.c              |    2 +
 examples/android/hello/AndroidManifest.xml |    7 ++-
 examples/android/hello/build.xml           |   73 ++++++++++++++--------------
 examples/android/hello/jni/Android.mk      |    6 ++-
 examples/android/hello/jni/main.c          |   14 ++++--
 6 files changed, 73 insertions(+), 44 deletions(-)

diff --git a/cogl/winsys/cogl-winsys-egl-android.c b/cogl/winsys/cogl-winsys-egl-android.c
index 269d65d..4b711cb 100644
--- a/cogl/winsys/cogl-winsys-egl-android.c
+++ b/cogl/winsys/cogl-winsys-egl-android.c
@@ -181,6 +181,20 @@ _cogl_winsys_egl_display_destroy (CoglDisplay *display)
   g_slice_free (CoglDisplayAndroid, egl_display->platform);
 }
 
+static void
+_cogl_winsys_egl_cleanup_context (CoglDisplay *display)
+{
+  CoglRenderer *renderer = display->renderer;
+  CoglRendererEGL *egl_renderer = renderer->winsys;
+  CoglDisplayEGL *egl_display = display->winsys;
+
+  if (egl_display->egl_surface != EGL_NO_SURFACE)
+    {
+      eglDestroySurface (egl_renderer->edpy, egl_display->egl_surface);
+      egl_display->egl_surface = EGL_NO_SURFACE;
+    }
+}
+
 static CoglBool
 _cogl_winsys_egl_onscreen_init (CoglOnscreen *onscreen,
                                 EGLConfig egl_config,
@@ -217,6 +231,7 @@ _cogl_winsys_egl_vtable =
   {
     .display_setup = _cogl_winsys_egl_display_setup,
     .display_destroy = _cogl_winsys_egl_display_destroy,
+    .cleanup_context = _cogl_winsys_egl_cleanup_context,
     .context_created = _cogl_winsys_egl_context_created,
     .onscreen_init = _cogl_winsys_egl_onscreen_init,
   };
diff --git a/cogl/winsys/cogl-winsys-egl.c b/cogl/winsys/cogl-winsys-egl.c
index 800ebce..17ed67b 100644
--- a/cogl/winsys/cogl-winsys-egl.c
+++ b/cogl/winsys/cogl-winsys-egl.c
@@ -630,9 +630,11 @@ _cogl_winsys_onscreen_deinit (CoglOnscreen *onscreen)
     return;
   if (egl_onscreen->egl_surface != EGL_NO_SURFACE)
     {
+#if 0
       if (eglDestroySurface (egl_renderer->edpy, egl_onscreen->egl_surface)
           == EGL_FALSE)
         g_warning ("Failed to destroy EGL surface");
+#endif
       egl_onscreen->egl_surface = EGL_NO_SURFACE;
     }
 
diff --git a/examples/android/hello/AndroidManifest.xml b/examples/android/hello/AndroidManifest.xml
index 3cb6026..8354579 100644
--- a/examples/android/hello/AndroidManifest.xml
+++ b/examples/android/hello/AndroidManifest.xml
@@ -1,7 +1,10 @@
 <?xml version="1.0" encoding="utf-8"?>
 <!-- BEGIN_INCLUDE(manifest) -->
+<!-- XXX: the package name had to be hacked to get a favourable
+     package listing in /data/system/packages.list in the first
+     8k to workaround a bug in the run-as command. -->
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-        package="org.cogl.Hello"
+        package="com.cogl.example.zzz.Hello"
         android:versionCode="1"
         android:versionName="1.0">
 
@@ -9,7 +12,7 @@
     <uses-sdk android:minSdkVersion="9" />
 
     <!-- This .apk has no Java code itself, so set hasCode to false. -->
-    <application android:label="@string/app_name" android:hasCode="false">
+    <application android:label="@string/app_name" android:hasCode="false" android:debuggable="true">
 
         <!-- Our activity is the built-in NativeActivity framework class.
              This will take care of integrating with our NDK code. -->
diff --git a/examples/android/hello/build.xml b/examples/android/hello/build.xml
index d69afbc..19afd0b 100644
--- a/examples/android/hello/build.xml
+++ b/examples/android/hello/build.xml
@@ -1,15 +1,14 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project name="TestCoglHello" default="help">
 
-<!-- The local.properties file is created and updated by the 'android'
-     tool.
-     It contains the path to the SDK. It should *NOT* be checked into
-     Version Control Systems. -->
+    <!-- The local.properties file is created and updated by the 'android' tool.
+         It contains the path to the SDK. It should *NOT* be checked into
+         Version Control Systems. -->
     <property file="local.properties" />
 
-    <!-- The build.properties file can be created by you and is never touched
-         by the 'android' tool. This is the place to change some of the
-         default property values used by the Ant rules.
+    <!-- The ant.properties file can be created by you. It is only edited by the
+         'android' tool to add properties to it.
+         This is the place to change some Ant specific build properties.
          Here are some properties you may want to change/update:
 
          source.dir
@@ -17,6 +16,9 @@
          out.dir
              The name of the output directory. Default is 'bin'.
 
+         For other overridable properties, look at the beginning of the rules
+         files in the SDK, at tools/ant/build.xml
+
          Properties related to the SDK location or the project target should
          be updated using the 'android' tool with the 'update' action.
 
@@ -24,26 +26,25 @@
          application and should be checked into Version Control Systems.
 
          -->
-    <property file="build.properties" />
+    <property file="ant.properties" />
 
-    <!-- The default.properties file is created and updated by the 'android'
+    <!-- The project.properties file is created and updated by the 'android'
          tool, as well as ADT.
+
+         This contains project specific properties such as project target, and library
+         dependencies. Lower level build properties are stored in ant.properties
+         (or in .classpath for Eclipse projects).
+
          This file is an integral part of the build system for your
          application and should be checked into Version Control Systems. -->
-    <property file="default.properties" />
+    <loadproperties srcFile="project.properties" />
 
-    <!-- Custom Android task to deal with the project target, and import the
-         proper rules.
-         This requires ant 1.6.0 or above. -->
-    <path id="android.antlibs">
-        <pathelement path="${sdk.dir}/tools/lib/anttasks.jar" />
-        <pathelement path="${sdk.dir}/tools/lib/sdklib.jar" />
-        <pathelement path="${sdk.dir}/tools/lib/androidprefs.jar" />
-    </path>
+    <!-- quick check on sdk.dir -->
+    <fail
+            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through an env var"
+            unless="sdk.dir"
+    />
 
-    <taskdef name="setup"
-        classname="com.android.ant.SetupTask"
-        classpathref="android.antlibs" />
 
 <!-- extension targets. Uncomment the ones where you want to do custom work
      in between standard targets -->
@@ -53,32 +54,32 @@
     <target name="-pre-compile">
     </target>
 
-    [This is typically used for code obfuscation.
-     Compiled code location: ${out.classes.absolute.dir}
-     If this is not done in place, override ${out.dex.input.absolute.dir}]
+    /* This is typically used for code obfuscation.
+       Compiled code location: ${out.classes.absolute.dir}
+       If this is not done in place, override ${out.dex.input.absolute.dir} */
     <target name="-post-compile">
     </target>
 -->
 
-
-    <!-- Execute the Android Setup task that will setup some properties
-         specific to the target, and import the build rules files.
-
-         The rules file is imported from
-            <SDK>/platforms/<target_platform>/ant/ant_rules_r#.xml
+    <!-- Import the actual build file.
 
          To customize existing targets, there are two options:
          - Customize only one target:
              - copy/paste the target into this file, *before* the
-               <setup> task.
+               <import> task.
              - customize it to your needs.
-         - Customize the whole script.
+         - Customize the whole content of build.xml
              - copy/paste the content of the rules files (minus the top node)
-               into this file, *after* the <setup> task
-             - disable the import of the rules by changing the setup task
-               below to <setup import="false" />.
+               into this file, replacing the <import> task.
              - customize to your needs.
+
+         ***********************
+         ****** IMPORTANT ******
+         ***********************
+         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
+         in order to avoid having your file be overridden by tools such as "android update project"
     -->
-    <setup />
+    <!-- version-tag: 1 -->
+    <import file="${sdk.dir}/tools/ant/build.xml" />
 
 </project>
diff --git a/examples/android/hello/jni/Android.mk b/examples/android/hello/jni/Android.mk
index 01c811c..cbb0735 100644
--- a/examples/android/hello/jni/Android.mk
+++ b/examples/android/hello/jni/Android.mk
@@ -5,15 +5,19 @@ include $(CLEAR_VARS)
 LOCAL_MODULE    := test-cogl-hello
 LOCAL_SRC_FILES := main.c
 LOCAL_LDLIBS    := -llog -landroid -lEGL -lGLESv1_CM
-LOCAL_STATIC_LIBRARIES := cogl android_native_app_glue gobject gmodule gthread glib-android glib iconv
+LOCAL_STATIC_LIBRARIES := cogl android_native_app_glue glib-android gobject gmodule gthread glib iconv intl
 LOCAL_ARM_MODE := arm
 LOCAL_CFLAGS := 				\
 	-DG_LOG_DOMAIN=\"TestCoglHello\"	\
 	-DCOGL_ENABLE_EXPERIMENTAL_2_0_API	\
+	-g3 -O0					\
 	$(NULL)
 
 include $(BUILD_SHARED_LIBRARY)
 
 $(call import-module,android/native_app_glue)
+$(call import-module,gettext)
+$(call import-module,libiconv)
 $(call import-module,glib)
+$(call import-module,glib-android)
 $(call import-module,cogl)
diff --git a/examples/android/hello/jni/main.c b/examples/android/hello/jni/main.c
index dacbbab..03549cf 100644
--- a/examples/android/hello/jni/main.c
+++ b/examples/android/hello/jni/main.c
@@ -34,6 +34,7 @@ typedef struct
 
   CoglContext *context;
   CoglPrimitive *triangle;
+  CoglPipeline *pipeline;
   CoglFramebuffer *fb;
 } TestData;
 
@@ -72,11 +73,12 @@ static int test_init (TestData* data)
 
   cogl_onscreen_show (onscreen);
 
-  cogl_push_framebuffer (data->fb);
-
-  data->triangle = cogl_primitive_new_p2c4 (COGL_VERTICES_MODE_TRIANGLES,
+  data->triangle = cogl_primitive_new_p2c4 (data->context,
+                                            COGL_VERTICES_MODE_TRIANGLES,
                                             3, triangle_vertices);
 
+  data->pipeline = cogl_pipeline_new (data->context);
+
   return 0;
 }
 
@@ -84,8 +86,9 @@ static test_draw_frame_and_swap (TestData *data)
 {
   if (data->context)
     {
-      cogl_primitive_draw (data->triangle);
-      cogl_framebuffer_swap_buffers (data->fb);
+      cogl_framebuffer_clear4f (data->fb, COGL_BUFFER_BIT_COLOR, 1, 0, 0, 1);
+      cogl_framebuffer_draw_primitive (data->fb, data->pipeline, data->triangle);
+      cogl_onscreen_swap_buffers (COGL_ONSCREEN (data->fb));
     }
 }
 
@@ -95,6 +98,7 @@ test_fini (TestData *data)
   if (data->fb)
     {
       cogl_object_unref (data->triangle);
+      cogl_object_unref (data->pipeline);
       cogl_object_unref (data->fb);
       cogl_object_unref (data->context);
       data->triangle = NULL;
-- 
1.7.3.16.g9464b

